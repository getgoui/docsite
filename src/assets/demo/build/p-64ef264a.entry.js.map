{"version":3,"names":["goCardRowCss","GoCardRow","this","cardClasses","componentWillLoad","hasHeadingSlot","hasSlot","el","stagger","inViewObserver","IntersectionObserver","entries","forEach","entry","i","isIntersecting","card","target","classList","add","style","cssText","unobserve","threshold","componentDidLoad","cols","colsTablet","colsDesktop","colsLarge","push","Math","ceil","loadCards","newCards","querySelectorAll","prepareCard","colClasses","wrapper","document","createElement","moveEl","rowEl","observe","render","noStretch","heading","moreLinkHref","moreLinkText","headingTag","headingRowProps","h","Object","assign","name","class","ref"],"sources":["src/patterns/go-card-row/go-card-row.scss?tag=go-card-row","src/patterns/go-card-row/go-card-row.tsx"],"sourcesContent":["go-card-row {\r\n  --card-row-gap: 1rem;\r\n\r\n  align-items: stretch;\r\n\r\n  --go-col-gap: var(--card-row-gap);\r\n  &.no-stretch {\r\n    align-items: flex-start;\r\n  }\r\n\r\n  go-card {\r\n    opacity: 0;\r\n    max-height: 200px;\r\n    &.loaded {\r\n      opacity: 1;\r\n      max-height: inherit;\r\n    }\r\n  }\r\n  .stagger {\r\n    go-card.loaded {\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  .card-col {\r\n    margin-bottom: var(--card-row-gap);\r\n  }\r\n}\r\n","import { Component, h, Element, Prop } from '@stencil/core';\r\nimport { moveEl } from '../../utils/dom';\r\nimport { hasSlot } from '../../utils/helper';\r\n\r\n/**\r\n * @slot default - Default slot, to be filled with `go-card` elements\r\n * @slot heading - Overwrite default `h2` heading for this card row section\r\n */\r\n@Component({\r\n  tag: 'go-card-row',\r\n  styleUrl: 'go-card-row.scss',\r\n  shadow: false,\r\n})\r\nexport class GoCardRow {\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * By default, `go-card-row` stretches all cards inside to the tallest card in view, unless this property is set to true.\r\n   */\r\n  @Prop() noStretch = false;\r\n\r\n  /**\r\n   * Number of columns from mobile breakpoint and up\r\n   */\r\n  @Prop() cols = 1;\r\n\r\n  /**\r\n   * Number of columns from tablet breakpoint and up\r\n   */\r\n  @Prop() colsTablet = 2;\r\n\r\n  /**\r\n   * Number of columns from desktop breakpoint and up\r\n   */\r\n  @Prop() colsDesktop = 3;\r\n\r\n  /**\r\n   * Number of columns from large breakpoint and up\r\n   */\r\n  @Prop() colsLarge = 4;\r\n\r\n  /**\r\n   * If set, cards will fade in one by one with the specified delay in milliseconds when they are in the viewport.\r\n   * uses `IntersectionObserver`, [see browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)\r\n   */\r\n  @Prop() stagger?: number;\r\n\r\n  /**\r\n   * If true, cards within the component will be wrapped inside a carousel\r\n   */\r\n  // @Prop() carousel = false;\r\n\r\n  /**\r\n   * Heading for this card row section\r\n   */\r\n  @Prop() heading?: string;\r\n\r\n  @Prop() headingTag?: string = 'h2';\r\n\r\n  /**\r\n   * View more link href\r\n   */\r\n  @Prop() moreLinkHref?: string;\r\n\r\n  /**\r\n   * View more link text\r\n   */\r\n  @Prop() moreLinkText?: string;\r\n\r\n  hasHeadingSlot: boolean;\r\n\r\n  /**\r\n   * the DOM ref of direct parent of the cards\r\n   */\r\n  rowEl: HTMLElement;\r\n\r\n  /**\r\n   * class list for each card\r\n   */\r\n  cardClasses = ['card-col'];\r\n\r\n  /**\r\n   * intersection observer to check if cards are in view\r\n   */\r\n  inViewObserver: IntersectionObserver;\r\n\r\n  componentWillLoad() {\r\n    // check if heading slot is used\r\n    this.hasHeadingSlot = hasSlot(this.el, 'heading');\r\n\r\n    // initialise intersection observer\r\n    if (this.stagger) {\r\n      this.inViewObserver = new IntersectionObserver(\r\n        (entries) => {\r\n          entries.forEach((entry, i) => {\r\n            if (!entry.isIntersecting) {\r\n              return;\r\n            }\r\n            const card = entry.target as HTMLElement;\r\n            // add stagger fade in effect\r\n            card.classList.add('stagger-fade-in');\r\n            card.style.cssText = `--stagger-delay: ${i * this.stagger}ms`;\r\n            // stop observing\r\n            this.inViewObserver.unobserve(card);\r\n          });\r\n        },\r\n        {\r\n          threshold: 0.2, // >= 1/5th of card is in view\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  async componentDidLoad() {\r\n    const { cols, colsTablet, colsDesktop, colsLarge } = this;\r\n\r\n    // mobile cols\r\n    this.cardClasses.push(`col-${Math.ceil(12 / cols)}`);\r\n    this.cardClasses.push(`col-tablet-${Math.ceil(12 / colsTablet)}`);\r\n    this.cardClasses.push(`col-desktop-${Math.ceil(12 / colsDesktop)}`);\r\n    this.cardClasses.push(`col-large-${Math.ceil(12 / colsLarge)}`);\r\n    this.loadCards();\r\n  }\r\n\r\n  loadCards() {\r\n    const newCards = this.el.querySelectorAll('go-card:not(.loaded)');\r\n    newCards.forEach((card: HTMLGoCardElement) => {\r\n      this.prepareCard(card, this.cardClasses);\r\n    });\r\n  }\r\n\r\n  prepareCard(card: HTMLGoCardElement, colClasses: string[]) {\r\n    // create wrapper container\r\n    const wrapper = document.createElement('div');\r\n    wrapper.classList.add(...colClasses);\r\n\r\n    // insert wrapper before el in the DOM tree\r\n    // card.parentNode.insertBefore(wrapper, card);\r\n\r\n    // move el into wrapper\r\n    moveEl(card, wrapper);\r\n\r\n    card.classList.add('loaded');\r\n    // move card into correct element\r\n    moveEl(wrapper, this.rowEl);\r\n\r\n    if (this.stagger) {\r\n      this.inViewObserver.observe(card);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { noStretch, stagger, heading, moreLinkHref, moreLinkText, hasHeadingSlot, headingTag } = this;\r\n    const headingRowProps = {\r\n      heading,\r\n      moreLinkHref,\r\n      moreLinkText,\r\n      headingTag,\r\n    };\r\n    return (\r\n      <section>\r\n        <go-heading-row {...headingRowProps}>{hasHeadingSlot ? <slot name=\"heading\"></slot> : null}</go-heading-row>\r\n        <div\r\n          class={{\r\n            'card-row row': true,\r\n            'no-stretch': noStretch,\r\n            'stagger': !!stagger,\r\n          }}\r\n          ref={(el) => (this.rowEl = el)}>\r\n          <slot></slot>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"0KAAA,MAAMA,EAAe,qV,MCaRC,EAAS,M,yBAkEpBC,KAAAC,YAAc,CAAC,Y,eA5DK,M,UAKL,E,gBAKM,E,iBAKC,E,eAKF,E,8DAkBU,K,wDA6B9B,iBAAAC,GAEEF,KAAKG,eAAiBC,EAAQJ,KAAKK,GAAI,WAGvC,GAAIL,KAAKM,QAAS,CAChBN,KAAKO,eAAiB,IAAIC,sBACvBC,IACCA,EAAQC,SAAQ,CAACC,EAAOC,KACtB,IAAKD,EAAME,eAAgB,CACzB,M,CAEF,MAAMC,EAAOH,EAAMI,OAEnBD,EAAKE,UAAUC,IAAI,mBACnBH,EAAKI,MAAMC,QAAU,oBAAoBP,EAAIZ,KAAKM,YAElDN,KAAKO,eAAea,UAAUN,EAAK,GACnC,GAEJ,CACEO,UAAW,I,EAMnB,sBAAMC,GACJ,MAAMC,KAAEA,EAAIC,WAAEA,EAAUC,YAAEA,EAAWC,UAAEA,GAAc1B,KAGrDA,KAAKC,YAAY0B,KAAK,OAAOC,KAAKC,KAAK,GAAKN,MAC5CvB,KAAKC,YAAY0B,KAAK,cAAcC,KAAKC,KAAK,GAAKL,MACnDxB,KAAKC,YAAY0B,KAAK,eAAeC,KAAKC,KAAK,GAAKJ,MACpDzB,KAAKC,YAAY0B,KAAK,aAAaC,KAAKC,KAAK,GAAKH,MAClD1B,KAAK8B,W,CAGP,SAAAA,GACE,MAAMC,EAAW/B,KAAKK,GAAG2B,iBAAiB,wBAC1CD,EAASrB,SAASI,IAChBd,KAAKiC,YAAYnB,EAAMd,KAAKC,YAAY,G,CAI5C,WAAAgC,CAAYnB,EAAyBoB,GAEnC,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQnB,UAAUC,OAAOiB,GAMzBI,EAAOxB,EAAMqB,GAEbrB,EAAKE,UAAUC,IAAI,UAEnBqB,EAAOH,EAASnC,KAAKuC,OAErB,GAAIvC,KAAKM,QAAS,CAChBN,KAAKO,eAAeiC,QAAQ1B,E,EAIhC,MAAA2B,GACE,MAAMC,UAAEA,EAASpC,QAAEA,EAAOqC,QAAEA,EAAOC,aAAEA,EAAYC,aAAEA,EAAY1C,eAAEA,EAAc2C,WAAEA,GAAe9C,KAChG,MAAM+C,EAAkB,CACtBJ,UACAC,eACAC,eACAC,cAEF,OACEE,EAAA,eACEA,EAAA,iBAAAC,OAAAC,OAAA,GAAoBH,GAAkB5C,EAAiB6C,EAAA,QAAMG,KAAK,YAAoB,MACtFH,EAAA,OACEI,MAAO,CACL,eAAgB,KAChB,aAAcV,EACdpC,UAAaA,GAEf+C,IAAMhD,GAAQL,KAAKuC,MAAQlC,GAC3B2C,EAAA,c"}