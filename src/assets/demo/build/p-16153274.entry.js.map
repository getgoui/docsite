{"version":3,"names":["goFieldsetCss","GoFieldset","updateErrorState","this","hasError","error","componentWillLoad","hasHintSlot","hasSlot","el","initIdProps","wrapChildrenInUl","div","ul","document","createElement","classList","add","children","i","length","li","appendChild","parentNode","replaceChild","componentDidLoad","isList","querySelector","render","label","hint","labelId","errorId","hintId","h","Host","class","id","name"],"sources":["src/components/form/go-fieldset/go-fieldset.scss?tag=go-fieldset","src/components/form/go-fieldset/go-fieldset.tsx"],"sourcesContent":["@import '../../../global//scss/form/mixins';\r\n\r\ngo-fieldset {\r\n  display: block;\r\n  fieldset {\r\n    padding: 0;\r\n    border: none;\r\n    legend {\r\n      @include label-wrapper;\r\n    }\r\n    .fieldset-content {\r\n      display: grid;\r\n      gap: var(--input-gap-inner);\r\n      @include unstyled-list;\r\n    }\r\n  }\r\n\r\n  .go-field {\r\n    margin-top: 0;\r\n  }\r\n}\r\n","import { Component, Host, h, Element, Prop, State, Watch } from '@stencil/core';\r\nimport { hasSlot, initIdProps } from '../../../utils';\r\n\r\n@Component({\r\n  tag: 'go-fieldset',\r\n  styleUrl: 'go-fieldset.scss',\r\n  shadow: false,\r\n})\r\nexport class GoFieldset {\r\n  /**\r\n   * Label of the input field\r\n   */\r\n  @Prop() label: string;\r\n  /**\r\n   * Hint message for the input\r\n   */\r\n  @Prop() hint?: string;\r\n  /**\r\n   * Error state of input, text provided will be shown as error message\r\n   */\r\n  @Prop() error?: boolean | string;\r\n\r\n  id: string;\r\n\r\n  /**\r\n   * DOM id for label\r\n   */\r\n  @Prop({ mutable: true })\r\n  labelId?: string;\r\n\r\n  /**\r\n   * DOM id for hint message\r\n   */\r\n  @Prop({ mutable: true })\r\n  hintId?: string;\r\n\r\n  /**\r\n   * DOM id for error\r\n   */\r\n  @Prop({ mutable: true })\r\n  errorId?: string;\r\n\r\n  /**\r\n   * Wrap direct DOM children in an unordered list so they are announced by screen readers, good for checkboxes and radio buttons\r\n   */\r\n  @Prop()\r\n  isList?: boolean = false;\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Allow empty value for `error` attribute and show error state\r\n   */\r\n  @State() hasError = false;\r\n\r\n  @Watch('error')\r\n  updateErrorState() {\r\n    this.hasError = typeof this.error !== 'undefined';\r\n  }\r\n\r\n  hasHintSlot: boolean;\r\n  componentWillLoad() {\r\n    this.hasHintSlot = hasSlot(this.el, 'hint');\r\n    initIdProps(this, this.el, ['label', 'hint', 'error'], 'go-fieldset-');\r\n    this.updateErrorState();\r\n  }\r\n\r\n  wrapChildrenInUl(div) {\r\n    // Create a new ul element\r\n    const ul = document.createElement('ul');\r\n    ul.classList.add('fieldset-content');\r\n    // Get the div's direct children\r\n    // we need to modify html structure, this will change the div.children reference.\r\n    // so make a new array to iterate against.\r\n\r\n    const children = [...div.children];\r\n    // Iterate over the children\r\n    for (let i = 0; i < children.length; i++) {\r\n      // Create a new li element\r\n      const li = document.createElement('li');\r\n      // Append the current child to the li element\r\n      li.appendChild(children[i]);\r\n      // Append the li element to the ul element\r\n      ul.appendChild(li);\r\n    }\r\n\r\n    // Replace the div with the ul element\r\n    div.parentNode.replaceChild(ul, div);\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.isList) {\r\n      this.wrapChildrenInUl(this.el.querySelector('.fieldset-content'));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { label, error, hint, hasError, hasHintSlot, labelId, errorId, hintId } = this;\r\n    return (\r\n      <Host>\r\n        <fieldset\r\n          class={{\r\n            'go-field': true,\r\n            'error': hasError,\r\n          }}\r\n          aria-invalid={hasError}>\r\n          <legend>\r\n            {/* screen reader announcements */}\r\n            <span class=\"label\" id={labelId}>\r\n              {label}\r\n            </span>\r\n            {hasHintSlot || hint ? (\r\n              <span class=\"hint\" id={hintId}>\r\n                <slot name=\"hint\">{hint}</slot>\r\n              </span>\r\n            ) : null}\r\n            <span class=\"visually-hidden\">{hasError ? <span id={errorId}>Invalid: {error}</span> : null}</span>\r\n          </legend>\r\n          <div class=\"fieldset-content\">\r\n            <slot></slot>\r\n          </div>\r\n          {hasError ? (\r\n            <div class=\"error-msg\" id={errorId}>\r\n              {error}\r\n            </div>\r\n          ) : null}\r\n        </fieldset>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"oJAAA,MAAMA,EAAgB,yX,MCQTC,EAAU,M,uKAsCF,M,cAOC,K,CAGpB,gBAAAC,GACEC,KAAKC,gBAAkBD,KAAKE,QAAU,W,CAIxC,iBAAAC,GACEH,KAAKI,YAAcC,EAAQL,KAAKM,GAAI,QACpCC,EAAYP,KAAMA,KAAKM,GAAI,CAAC,QAAS,OAAQ,SAAU,gBACvDN,KAAKD,kB,CAGP,gBAAAS,CAAiBC,GAEf,MAAMC,EAAKC,SAASC,cAAc,MAClCF,EAAGG,UAAUC,IAAI,oBAKjB,MAAMC,EAAW,IAAIN,EAAIM,UAEzB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CAExC,MAAME,EAAKP,SAASC,cAAc,MAElCM,EAAGC,YAAYJ,EAASC,IAExBN,EAAGS,YAAYD,E,CAIjBT,EAAIW,WAAWC,aAAaX,EAAID,E,CAGlC,gBAAAa,GACE,GAAItB,KAAKuB,OAAQ,CACfvB,KAAKQ,iBAAiBR,KAAKM,GAAGkB,cAAc,qB,EAIhD,MAAAC,GACE,MAAMC,MAAEA,EAAKxB,MAAEA,EAAKyB,KAAEA,EAAI1B,SAAEA,EAAQG,YAAEA,EAAWwB,QAAEA,EAAOC,QAAEA,EAAOC,OAAEA,GAAW9B,KAChF,OACE+B,EAACC,EAAI,KACHD,EAAA,YACEE,MAAO,CACL,WAAY,KACZ/B,MAASD,GACV,eACaA,GACd8B,EAAA,cAEEA,EAAA,QAAME,MAAM,QAAQC,GAAIN,GACrBF,GAEFtB,GAAeuB,EACdI,EAAA,QAAME,MAAM,OAAOC,GAAIJ,GACrBC,EAAA,QAAMI,KAAK,QAAQR,IAEnB,KACJI,EAAA,QAAME,MAAM,mBAAmBhC,EAAW8B,EAAA,QAAMG,GAAIL,GAAO,YAAY3B,GAAgB,OAEzF6B,EAAA,OAAKE,MAAM,oBACTF,EAAA,cAED9B,EACC8B,EAAA,OAAKE,MAAM,YAAYC,GAAIL,GACxB3B,GAED,M"}