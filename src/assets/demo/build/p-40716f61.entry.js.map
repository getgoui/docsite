{"version":3,"names":["Keys","MenuActions","TreeActions","filterOptions","options","filter","exclude","filterString","toLowerCase","trim","option","matches","label","indexOf","getActionFromKey","event","menuOpen","key","altKey","ctrlKey","metaKey","openKeys","includes","Open","Backspace","Clear","length","Type","Down","Right","Next","Up","CloseSelect","Left","Previous","Home","First","End","Last","PageUp","PageDown","Escape","Close","Enter","Space","getIndexByLetter","startIndex","orderedOptions","slice","firstMatch","allSameLetter","array","every","letter","split","getUpdatedIndex","current","max","action","Math","min","isScrollable","element","clientHeight","scrollHeight","maintainScrollVisibility","activeElement","scrollParent","offsetHeight","offsetTop","parentOffsetHeight","scrollTop","isAbove","isBelow","scrollTo","parseSelectOptions","console","log","startsWith","parsedOptions","parseItems","map","value","e","error","goSelectCss","GoSelect","this","hasNamedSlot","prefixer","controlId","uniqueId","ignoreBlur","componentWillLoad","loadOptions","attrs","inheritNonFieldAttrs","loadFieldSlots","el","loadValue","activeIndex","findIndex","selectOption","handleDomOnOpen","isOpen","listboxRef","open","inputRef","dropdownWidth","offsetWidth","activeOptionRef","close","render","id","readonly","disabled","name","fieldProps","loadFieldProps","activeId","controlAttrs","Object","assign","h","type","fieldSlotNames","slotName","slot","class","role","undefined","ref","tabindex","onBlur","onComboBlur","bind","onKeyDown","onComboKeyDown","_a","arrow","xmlns","fill","stroke","viewBox","d","width","onOpened","updateMenuState","onClosed","i","onClick","stopPropagation","onOptionClick","onMouseDown","onOptionMouseDown","getSearchString","char","searchTimeout","window","clearTimeout","setTimeout","searchString","preventDefault","onOptionChange","onComboType","searchIndex","index","selected","selectedLabel","selectedIndex","goChange","emit","callFocus","focus"],"sources":["src/components/form/go-select/utils.ts","src/components/form/go-select/go-select.scss?tag=go-select","src/components/form/go-select/go-select.tsx"],"sourcesContent":["/**\r\n * This file is based on the good work of @smhigley:\r\n * https://github.com/microsoft/sonder-ui/blob/master/src/components/select/select.tsx\r\n */\r\n\r\nimport { SelectOption } from '@/interfaces';\r\nimport { parseItems } from '@/utils';\r\n\r\nexport enum Keys {\r\n  Backspace = 'Backspace',\r\n  Clear = 'Clear',\r\n  Down = 'ArrowDown',\r\n  End = 'End',\r\n  Enter = 'Enter',\r\n  Escape = 'Escape',\r\n  Home = 'Home',\r\n  Left = 'ArrowLeft',\r\n  PageDown = 'PageDown',\r\n  PageUp = 'PageUp',\r\n  Right = 'ArrowRight',\r\n  Space = ' ',\r\n  Tab = 'Tab',\r\n  Up = 'ArrowUp',\r\n}\r\n\r\nexport enum MenuActions {\r\n  Close,\r\n  CloseSelect,\r\n  First,\r\n  Last,\r\n  Next,\r\n  Open,\r\n  PageDown,\r\n  PageUp,\r\n  Previous,\r\n  Select,\r\n  Space,\r\n  Type,\r\n}\r\n\r\nexport enum TreeActions {\r\n  Close,\r\n  First,\r\n  Last,\r\n  Next,\r\n  Open,\r\n  Previous,\r\n  Select,\r\n  UpLevel,\r\n}\r\n\r\n// filter an array of options against an input string\r\n// returns an array of options that begin with the filter string, case-independent\r\nexport function filterOptions(\r\n  options: SelectOption[] = [],\r\n  filter: string,\r\n  exclude: SelectOption[] = [],\r\n): SelectOption[] {\r\n  let filterString = filter.toLowerCase().trim();\r\n  return options.filter((option) => {\r\n    const matches = option.label.toLowerCase().indexOf(filterString) === 0;\r\n    return matches && exclude.indexOf(option) < 0;\r\n  });\r\n}\r\n\r\n// return an array of exact option name matches from a comma-separated string\r\nexport function findMatches(options: SelectOption[], search: string): SelectOption[] {\r\n  const labels = search.split(',');\r\n  return labels\r\n    .map((label) => {\r\n      const match = options.filter((option) => label.trim().toLowerCase() === option.label.toLowerCase());\r\n      return match.length > 0 ? match[0] : null;\r\n    })\r\n    .filter((option) => option !== null);\r\n}\r\n\r\n// return combobox action from key press\r\nexport function getActionFromKey(event: KeyboardEvent, menuOpen: boolean): MenuActions {\r\n  const { key, altKey, ctrlKey, metaKey } = event;\r\n  const openKeys = ['ArrowDown', 'ArrowUp', 'Enter', ' ', 'Home', 'End']; // all keys that will open the combo\r\n\r\n  // handle opening when closed\r\n  if (!menuOpen && openKeys.includes(key)) {\r\n    return MenuActions.Open;\r\n  }\r\n\r\n  // handle typing characters when open or closed\r\n  if (\r\n    key === Keys.Backspace ||\r\n    key === Keys.Clear ||\r\n    (key.length === 1 && key !== ' ' && !altKey && !ctrlKey && !metaKey)\r\n  ) {\r\n    return MenuActions.Type;\r\n  }\r\n\r\n  // handle keys when open\r\n  if (menuOpen) {\r\n    if ((key === Keys.Down && !altKey) || key === Keys.Right) {\r\n      return MenuActions.Next;\r\n    } else if (key === Keys.Up && altKey) {\r\n      return MenuActions.CloseSelect;\r\n    } else if (key === Keys.Up || key === Keys.Left) {\r\n      return MenuActions.Previous;\r\n    } else if (key === Keys.Home) {\r\n      return MenuActions.First;\r\n    } else if (key === Keys.End) {\r\n      return MenuActions.Last;\r\n    } else if (key === Keys.PageUp) {\r\n      return MenuActions.PageUp;\r\n    } else if (key === Keys.PageDown) {\r\n      return MenuActions.PageDown;\r\n    } else if (key === Keys.Escape) {\r\n      return MenuActions.Close;\r\n    } else if (key === Keys.Enter) {\r\n      return MenuActions.CloseSelect;\r\n    } else if (key === Keys.Space) {\r\n      return MenuActions.Space;\r\n    }\r\n  }\r\n}\r\n\r\n// return the index of an option from an array of options, based on a search string\r\n// if the filter is multiple iterations of the same letter (e.g \"aaa\"), then cycle through first-letter matches\r\nexport function getIndexByLetter(options: SelectOption[], filter: string, startIndex = 0): number {\r\n  const orderedOptions = [...options.slice(startIndex), ...options.slice(0, startIndex)];\r\n  const firstMatch = filterOptions(orderedOptions, filter)[0];\r\n  const allSameLetter = (array) => array.every((letter) => letter === array[0]);\r\n\r\n  // first check if there is an exact match for the typed string\r\n  if (firstMatch) {\r\n    return options.indexOf(firstMatch);\r\n  }\r\n\r\n  // if the same letter is being repeated, cycle through first-letter matches\r\n  else if (allSameLetter(filter.split(''))) {\r\n    const matches = filterOptions(orderedOptions, filter[0]);\r\n    return options.indexOf(matches[0]);\r\n  }\r\n\r\n  // if no matches, return -1\r\n  else {\r\n    return -1;\r\n  }\r\n}\r\n\r\n// get updated option index\r\nexport function getUpdatedIndex(current: number, max: number, action: MenuActions): number {\r\n  switch (action) {\r\n    case MenuActions.First:\r\n      return 0;\r\n    case MenuActions.Last:\r\n      return max;\r\n    case MenuActions.Previous:\r\n      return Math.max(0, current - 1);\r\n    case MenuActions.Next:\r\n      return Math.min(max, current + 1);\r\n    default:\r\n      return current;\r\n  }\r\n}\r\n\r\n// check if an element is currently scrollable\r\nexport function isScrollable(element: HTMLElement): boolean {\r\n  return element && element.clientHeight < element.scrollHeight;\r\n}\r\n\r\n// ensure given child element is within the parent's visible scroll area\r\nexport function maintainScrollVisibility(activeElement: HTMLElement, scrollParent: HTMLElement) {\r\n  const { offsetHeight, offsetTop } = activeElement;\r\n  const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;\r\n\r\n  const isAbove = offsetTop < scrollTop;\r\n  const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\r\n\r\n  if (isAbove) {\r\n    scrollParent.scrollTo(0, offsetTop);\r\n  } else if (isBelow) {\r\n    scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\r\n  }\r\n}\r\n\r\n/**\r\n * parse multiple formats of options prop into SelectOption[]\r\n */\r\nexport const parseSelectOptions = (options: string | string[] | SelectOption[]): SelectOption[] | null => {\r\n  try {\r\n    // vue passes array of strings into prop as the result of Array.toString()\r\n    console.log('parseSelectOptions', { options });\r\n    if (typeof options === 'string' && !options.startsWith('[')) {\r\n      options = options.split(',');\r\n    }\r\n\r\n    const parsedOptions = parseItems<SelectOption[] | string[]>(options);\r\n    if (parsedOptions) {\r\n      // format parsed options into SelectOption[]\r\n      return parsedOptions.map((option) =>\r\n        typeof option === 'string'\r\n          ? {\r\n              value: option,\r\n              label: option,\r\n            }\r\n          : option,\r\n      );\r\n    }\r\n  } catch (e) {\r\n    console.error(`Couldn't parse options: `, options, { e });\r\n  }\r\n};\r\n","@import '../../../global/scss/dropdown/mixins';\r\n\r\ngo-select {\r\n  @include dropdown-item-vars;\r\n  --dropdown-width: 100%;\r\n\r\n  .combo {\r\n    width: 100%;\r\n    position: relative;\r\n  }\r\n  .control-icon {\r\n    z-index: 1;\r\n  }\r\n  .control {\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    .arrow {\r\n      height: 1.5em;\r\n      @include transition(transform);\r\n      &.open {\r\n        transform: rotate(180deg);\r\n      }\r\n    }\r\n  }\r\n\r\n  go-dropdown {\r\n    max-height: 20rem;\r\n    overflow: auto;\r\n    z-index: 9;\r\n  }\r\n\r\n  .combo-option {\r\n    @include dropdown-item;\r\n\r\n    &[aria-selected] {\r\n      @include item-selected-state;\r\n    }\r\n  }\r\n\r\n  &[disabled] {\r\n    .combo-option {\r\n      @include item-disabled-state;\r\n    }\r\n  }\r\n}\r\n","import { Component, h, Element, Prop, State, Event, EventEmitter, Watch } from '@stencil/core';\r\nimport { FieldValue, GoChangeEventDetail, SelectOption, SelectProps } from '@/interfaces';\r\nimport { fieldSlotNames, inheritNonFieldAttrs, loadFieldSlots, loadFieldProps } from '@/utils';\r\nimport {\r\n  getActionFromKey,\r\n  getIndexByLetter,\r\n  getUpdatedIndex,\r\n  isScrollable,\r\n  maintainScrollVisibility,\r\n  MenuActions,\r\n  parseSelectOptions,\r\n} from './utils';\r\nimport { uniqueId } from 'lodash-es';\r\n\r\n@Component({\r\n  tag: 'go-select',\r\n  styleUrl: 'go-select.scss',\r\n  shadow: false,\r\n})\r\nexport class GoSelect implements SelectProps {\r\n  @Element() el: HTMLElement;\r\n\r\n  @Prop() name: string;\r\n  @Prop() label: string;\r\n  @Prop() labelId?: string;\r\n  @Prop() suffixId?: string;\r\n  @Prop() hintId?: string;\r\n  @Prop() errorId?: string;\r\n  @Prop() disabled?: boolean;\r\n  @Prop() hint?: string;\r\n  @Prop() error?: string | boolean;\r\n  @Prop() readonly?: boolean;\r\n  @Prop({ mutable: true }) value?: FieldValue;\r\n\r\n  /**\r\n   * Array of options.\r\n   * Note:\r\n   * Sometimes frameworks may incorrectly pass the result of Array.toString() into this prop,\r\n   * `go-select` tries to obsorb this issue by trying to do a `split(',')` on the options prop\r\n   * if a string is passed in.\r\n   * This means the accepted formats include:\r\n   * 1. array of objects of type `{label: string, value: string}`\r\n   * 2. array of strings (e.g. ['Apple', 'Orange', 'Banana'])\r\n   * 3. string, toString() result of format 2 (i.e. 'Apple,Orange,Banana')\r\n   * 4. string, option 1 or 2 passed in as string that can be parsed by [JSON5](https://json5.org/)\r\n   */\r\n  @Prop() options: SelectOption[] | string[] | string;\r\n\r\n  /**\r\n   * parsed options array\r\n   */\r\n  @State() parsedOptions: SelectOption[] = [];\r\n\r\n  /**\r\n   * common form control properties\r\n   */\r\n  @State() attrs: any;\r\n\r\n  hasNamedSlot: { [key: string]: boolean } = {};\r\n  prefixer = 'go-select-';\r\n  controlId = uniqueId(this.prefixer);\r\n  controlEl: HTMLElement;\r\n\r\n  async componentWillLoad() {\r\n    this.loadOptions();\r\n    this.attrs = inheritNonFieldAttrs(this, ['options']);\r\n    this.hasNamedSlot = loadFieldSlots(this.el);\r\n    if (this.value) {\r\n      this.loadValue();\r\n    }\r\n  }\r\n\r\n  @Watch('options')\r\n  loadOptions() {\r\n    this.parsedOptions = parseSelectOptions(this.options);\r\n  }\r\n\r\n  @Watch('value')\r\n  loadValue() {\r\n    this.activeIndex = this.parsedOptions.findIndex((option) => option.value === this.value);\r\n    this.selectOption(this.activeIndex);\r\n  }\r\n\r\n  /**\r\n   * Emit custom event with selected value\r\n   */\r\n  @Event({\r\n    eventName: 'gochange',\r\n  })\r\n  goChange: EventEmitter<GoChangeEventDetail<string>>;\r\n\r\n  // Active option index\r\n  @State() activeIndex = -1;\r\n\r\n  // Menu state\r\n  @State() open = false;\r\n\r\n  // Current accumulated search string\r\n  @State() searchString: string;\r\n\r\n  // Timeout after each typed character\r\n  @State() searchTimeout: number | null;\r\n\r\n  // Selected option index\r\n  @State() selectedIndex: number;\r\n\r\n  // input value\r\n  @State() selectedLabel = '';\r\n\r\n  @State() dropdownWidth = 'auto';\r\n\r\n  // save reference to active option\r\n  private activeOptionRef: HTMLElement;\r\n\r\n  // Prevent menu closing before click completed\r\n  private ignoreBlur = false;\r\n\r\n  // save reference to combobox element\r\n  private inputRef: HTMLElement;\r\n\r\n  // save reference to listbox\r\n  private listboxRef: HTMLGoDropdownElement;\r\n\r\n  @Watch('open')\r\n  handleDomOnOpen(isOpen) {\r\n    if (isOpen) {\r\n      this.listboxRef.open();\r\n      // adjust dropdown size\r\n      // - we use fixed positioning strategy to make dropdown \"break out\" of the clipping containers, now we need to calculate dropdown width up opening\r\n      // see https://floating-ui.com/docs/computePosition#strategy\r\n      if (this.inputRef) {\r\n        this.dropdownWidth = `${this.inputRef.offsetWidth}px`;\r\n      }\r\n      if (isScrollable(this.listboxRef) && this.activeOptionRef) {\r\n        maintainScrollVisibility(this.activeOptionRef, this.listboxRef);\r\n      }\r\n    } else {\r\n      this.listboxRef.close();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      parsedOptions,\r\n      activeIndex,\r\n      controlId: id,\r\n      open = false,\r\n      dropdownWidth,\r\n      value,\r\n      readonly,\r\n      disabled,\r\n      name,\r\n      attrs,\r\n    } = this;\r\n\r\n    const fieldProps = loadFieldProps(this);\r\n\r\n    const activeId = open ? `${id}-${activeIndex}` : '';\r\n\r\n    const controlAttrs = {\r\n      id,\r\n      name,\r\n      value,\r\n      ...attrs,\r\n    };\r\n    return [\r\n      <input type=\"hidden\" name={name} value={value} />,\r\n      <go-field {...fieldProps}>\r\n        {fieldSlotNames.map((slotName) => {\r\n          if (this.hasNamedSlot[slotName]) {\r\n            return (\r\n              <template slot={slotName}>\r\n                <slot name={slotName}></slot>\r\n              </template>\r\n            );\r\n          }\r\n        })}\r\n        <div class=\"combo\">\r\n          <div\r\n            {...controlAttrs}\r\n            role=\"combobox\"\r\n            aria-activedescendant={activeId}\r\n            aria-autocomplete=\"none\"\r\n            aria-haspopup=\"listbox\"\r\n            aria-expanded={`${open}`}\r\n            aria-labelledby={`${id} ${id}-value`}\r\n            aria-controls={`${id}-listbox`}\r\n            aria-disabled={disabled ? 'true' : undefined}\r\n            aria-readonly={readonly ? 'true' : undefined}\r\n            class=\"control\"\r\n            id={`${id}-value`}\r\n            ref={(el) => (this.inputRef = el)}\r\n            tabindex=\"0\"\r\n            onBlur={this.onComboBlur.bind(this)}\r\n            onKeyDown={this.onComboKeyDown.bind(this)}>\r\n            <span>{parsedOptions && parsedOptions[activeIndex]?.label ? parsedOptions[activeIndex].label : ''}</span>\r\n            <svg\r\n              class={{ arrow: true, open }}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              aria-hidden=\"true\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              stroke-width=\"2\"\r\n              viewBox=\"0 0 24 24\">\r\n              <path d=\"m6 9 6 6 6-6\" />\r\n            </svg>\r\n          </div>\r\n          <go-dropdown\r\n            disabled={readonly || disabled}\r\n            trigger-selector={`#${id}-value`}\r\n            width={dropdownWidth}\r\n            onOpened={() => {\r\n              this.updateMenuState(true);\r\n            }}\r\n            onClosed={() => {\r\n              this.updateMenuState(false);\r\n            }}\r\n            role=\"listbox\"\r\n            ref={(el) => (this.listboxRef = el)}\r\n            id={`${id}-listbox`}>\r\n            {parsedOptions &&\r\n              parsedOptions.map((option, i) => {\r\n                return (\r\n                  <div\r\n                    class={{ 'current': this.activeIndex === i, 'combo-option': true }}\r\n                    id={`${id}-${i}`}\r\n                    aria-selected={this.activeIndex === i ? 'true' : undefined}\r\n                    ref={(el) => {\r\n                      if (this.activeIndex === i) {\r\n                        this.activeOptionRef = el;\r\n                      }\r\n                    }}\r\n                    role=\"option\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      this.onOptionClick(i);\r\n                    }}\r\n                    onMouseDown={this.onOptionMouseDown.bind(this)}>\r\n                    {option.label}\r\n                  </div>\r\n                );\r\n              })}\r\n          </go-dropdown>\r\n        </div>\r\n      </go-field>,\r\n    ];\r\n  }\r\n\r\n  private getSearchString(char: string) {\r\n    // reset typing timeout and start new timeout\r\n    // this allows us to make multiple-letter matches, like a native select\r\n    if (typeof this.searchTimeout === 'number') {\r\n      window.clearTimeout(this.searchTimeout);\r\n    }\r\n\r\n    this.searchTimeout = window.setTimeout(() => {\r\n      this.searchString = '';\r\n    }, 500);\r\n\r\n    // add most recent letter to saved search string\r\n    this.searchString += char;\r\n    return this.searchString;\r\n  }\r\n\r\n  private onComboKeyDown(event: KeyboardEvent) {\r\n    if (!this.parsedOptions) {\r\n      return;\r\n    }\r\n    const { key } = event;\r\n    const max = this.parsedOptions.length - 1;\r\n\r\n    const action = getActionFromKey(event, this.open);\r\n\r\n    switch (action) {\r\n      case MenuActions.Next:\r\n      case MenuActions.Last:\r\n      case MenuActions.First:\r\n      case MenuActions.Previous:\r\n        event.preventDefault();\r\n        return this.onOptionChange(getUpdatedIndex(this.activeIndex, max, action));\r\n      case MenuActions.CloseSelect:\r\n      case MenuActions.Space:\r\n        event.preventDefault();\r\n        this.selectOption(this.activeIndex);\r\n      case MenuActions.Close:\r\n        event.preventDefault();\r\n        return this.updateMenuState(false);\r\n      case MenuActions.Type:\r\n        // this.activeIndex = Math.max(0, getIndexByLetter(this.options, key));\r\n        this.onComboType(key);\r\n      case MenuActions.Open:\r\n        event.preventDefault();\r\n        return this.updateMenuState(true);\r\n    }\r\n  }\r\n\r\n  private onComboBlur() {\r\n    if (this.ignoreBlur) {\r\n      this.ignoreBlur = false;\r\n      return;\r\n    }\r\n\r\n    if (this.open) {\r\n      this.selectOption(this.activeIndex);\r\n      this.updateMenuState(false, false);\r\n    }\r\n  }\r\n\r\n  private onComboType(letter: string) {\r\n    // open the listbox if it is closed\r\n    this.updateMenuState(true);\r\n\r\n    // find the index of the first matching option\r\n    const searchString = this.getSearchString(letter);\r\n    const searchIndex = getIndexByLetter(this.parsedOptions, searchString, this.activeIndex + 1);\r\n\r\n    // if a match was found, go to it\r\n    if (searchIndex >= 0) {\r\n      this.onOptionChange(searchIndex);\r\n    }\r\n  }\r\n\r\n  private onOptionChange(index: number) {\r\n    this.activeIndex = index;\r\n  }\r\n\r\n  private onOptionClick(index: number) {\r\n    this.onOptionChange(index);\r\n    this.selectOption(index);\r\n    this.updateMenuState(false);\r\n  }\r\n\r\n  private onOptionMouseDown() {\r\n    this.ignoreBlur = true;\r\n  }\r\n\r\n  private selectOption(index: number) {\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n    const selected = this.parsedOptions[index];\r\n    this.selectedLabel = selected.label;\r\n    this.selectedIndex = index;\r\n    this.value = selected.value;\r\n\r\n    this.goChange.emit({ value: selected.value });\r\n  }\r\n\r\n  private updateMenuState(open: boolean, callFocus = true) {\r\n    if (open && (this.readonly || this.disabled)) {\r\n      return;\r\n    }\r\n    this.open = open;\r\n    if (callFocus) {\r\n      this.inputRef.focus();\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}