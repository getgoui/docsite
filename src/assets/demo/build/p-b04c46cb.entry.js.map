{"version":3,"names":["goAccordionCss","GoAccordion","componentWillLoad","this","items","Array","from","el","children","componentDidLoad","multiple","activeItem","selectDirectChildren","open","closeNonActive","openHandler","e","stopPropagation","eventTarget","target","forEach","item","isSameNode","close","render","h","Host","goAccordionItemCss","GoAccordionItem","hasHeadingSlot","hasSlot","hasArrowSlot","panelId","uniqueId","headerId","parentGroup","closest","autoHeight","panelEl","style","setProperty","scrollHeight","onTransitionEnd","addEventListener","onTransitionStart","handleNavigation","key","nextElementSibling","focusOnControl","previousElementSibling","length","active","overflow","opened","emit","visibility","closed","opening","closing","toggle","querySelector","focus","headingTag","HeadingTag","class","id","role","onClick","onKeyDown","name","heading","xmlns","fill","stroke","viewBox","focusable","d","ref"],"sources":["src/components/go-accordion/go-accordion.scss?tag=go-accordion","src/components/go-accordion/go-accordion.tsx","src/components/go-accordion/go-accordion-item.scss?tag=go-accordion-item","src/components/go-accordion/go-accordion-item.tsx"],"sourcesContent":["go-accordion {\r\n  /**\r\n    @prop --heading-padding-x:\r\n      Horizontal padding for item heading\r\n      - default: 1rem\r\n  */\r\n  --heading-padding-x: 1rem;\r\n\r\n  /**\r\n    @prop --heading-padding-y:\r\n      Vertical padding for item heading\r\n      - default: 0.5rem\r\n  */\r\n  --heading-padding-y: var(--go-size--1);\r\n\r\n  /**\r\n    @prop --panel-padding-x:\r\n      Horizontal padding for inner content\r\n      - default: 2rem\r\n  */\r\n  --panel-padding-x: 1rem;\r\n\r\n  /**\r\n    @prop --panel-padding-y:\r\n      Vertical padding for inner content\r\n      - default: 2rem\r\n  */\r\n  --panel-padding-y: 1rem;\r\n\r\n  /**\r\n    @prop --panel-max-height:\r\n      Inner content max height. This values is also used for CSS animation\r\n      - default: 100vh\r\n  */\r\n  --panel-max-height: 100vh;\r\n\r\n  /**\r\n    @prop --heading-text-color:\r\n      Heading text colour\r\n      - default: var(--go-color-text, #333333)\r\n  */\r\n  --heading-text-color: var(--go-color-text, #333);\r\n\r\n  /**\r\n    @prop --heading-bg-color:\r\n      Heading background colour\r\n      - default: var(--go-color-neutral-100)\r\n  */\r\n  --heading-bg-color: var(--go-color-neutral-100);\r\n\r\n  /**\r\n    @prop --heading-font-size:\r\n      Heading font size\r\n      - default: var(--go-size-0, 1rem)\r\n  */\r\n  --heading-font-size: var(--go-size-0, 1rem);\r\n\r\n  /**\r\n    @prop --heading-font-weight:\r\n      Heading font weight\r\n      - default: 700\r\n  */\r\n  --heading-font-weight: 700;\r\n\r\n  /**\r\n    @prop --panel-bg-color:\r\n      Content background colour\r\n      - default: var(--go-color-bg)\r\n  */\r\n  --panel-bg-color: var(--go-color-bg);\r\n\r\n  /**\r\n    @prop --heading-border-bottom:\r\n      Bottom border applied to the heading element to better separate the heading and panel, especially useful when content is scrollable.\r\n      - default: var(--go-border-thin) solid var(--go-color-border)\r\n  */\r\n  --heading-border-bottom: var(--go-border-thin) solid var(--go-color-border);\r\n\r\n  /**\r\n    @prop --heading-bg-color-hover:\r\n      Bg color for hover state\r\n      - default: var(--go-color-neutral-200)\r\n  */\r\n  --heading-bg-color-hover: var(--go-color-neutral-200);\r\n\r\n  /**\r\n    @prop --heading-fg-color-hover:\r\n      Foreground color for hover state\r\n      - default: var(--go-color-text)\r\n  */\r\n  --heading-fg-color-hover: var(--go-color-text);\r\n\r\n  /**\r\n    @prop --heading-radius:\r\n      Border radius of heading button\r\n      - default: var(--radius-2)\r\n  */\r\n  --heading-radius: var(--radius-2);\r\n}\r\n","import { Component, Host, h, Prop, Element, Listen } from '@stencil/core';\r\nimport { selectDirectChildren } from '../../utils/helper';\r\n\r\n/**\r\n *\r\n */\r\n@Component({\r\n  tag: 'go-accordion',\r\n  styleUrl: 'go-accordion.scss',\r\n  shadow: false,\r\n})\r\nexport class GoAccordion {\r\n  @Element() el: HTMLElement;\r\n  /**\r\n   * If true, multiple `<go-accordion-item>`s can be opened at the same time\r\n   */\r\n  @Prop() multiple?: boolean = false;\r\n\r\n  activeItem: HTMLGoAccordionItemElement;\r\n\r\n  items: HTMLGoAccordionItemElement[];\r\n\r\n  componentWillLoad() {\r\n    this.items = Array.from(this.el.children) as HTMLGoAccordionItemElement[];\r\n  }\r\n  componentDidLoad() {\r\n    // if there's any active accordion item, show them by default and close the rest.\r\n    if (!this.multiple) {\r\n      this.activeItem = selectDirectChildren(this.el, 'go-accordion-item[active]')[0] as HTMLGoAccordionItemElement;\r\n      if (this.activeItem) {\r\n        this.activeItem.open();\r\n      }\r\n      this.closeNonActive();\r\n    }\r\n  }\r\n\r\n  @Listen('opened')\r\n  openHandler(e: Event) {\r\n    e.stopPropagation();\r\n    const eventTarget = e.target as HTMLGoAccordionItemElement;\r\n    if (!this.multiple) {\r\n      this.activeItem = eventTarget;\r\n      this.closeNonActive();\r\n    }\r\n  }\r\n\r\n  closeNonActive() {\r\n    this.items.forEach((item) => {\r\n      if (!item.isSameNode(this.activeItem)) {\r\n        item.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","go-accordion-item {\r\n  @include reduced-motion {\r\n    --go-duration-normal: 0.01s;\r\n  }\r\n\r\n  display: block;\r\n  .heading {\r\n    .heading-control {\r\n      background: var(--heading-bg-color);\r\n      color: var(--heading-text-color);\r\n      font-size: var(--heading-font-size, 1rem);\r\n      border-radius: var(--heading-radius);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      width: 100%;\r\n      border: none;\r\n      padding: var(--heading-padding-y) var(--heading-padding-x);\r\n      cursor: pointer;\r\n      @include transition(border-radius);\r\n      &:hover,\r\n      &:focus-visible {\r\n        --heading-bg-color: var(--heading-bg-color-hover);\r\n        --heading-text-color: var(--heading-fg-color-hover);\r\n      }\r\n\r\n      &:focus-visible {\r\n        @include focus-outline;\r\n      }\r\n    }\r\n    .arrow {\r\n      display: block;\r\n      color: currentColor;\r\n      @include transition(transform);\r\n\r\n      width: 1.5em;\r\n      height: 1.5em;\r\n    }\r\n  }\r\n  .panel-wrapper {\r\n    overflow: hidden;\r\n    max-height: 0;\r\n    transition: max-height var(--go-duration-normal) var(--go-timing-function);\r\n    background: var(--panel-bg-color);\r\n    .panel {\r\n      border-top-left-radius: 0;\r\n      border-top-right-radius: 0;\r\n      overflow: hidden;\r\n      padding: var(--panel-padding-y) var(--panel-padding-x);\r\n    }\r\n  }\r\n  &.autoHeight {\r\n    .panel-wrapper {\r\n      overflow: hidden;\r\n    }\r\n  }\r\n  &.active {\r\n    > .heading {\r\n      border-bottom-left-radius: 0;\r\n      border-bottom-right-radius: 0;\r\n      transition: border-radius 0s;\r\n      .arrow {\r\n        transform: rotate(180deg);\r\n      }\r\n    }\r\n    > .panel-wrapper {\r\n      max-height: var(--body-max-height);\r\n    }\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, State, Element, Method, Event, EventEmitter } from '@stencil/core';\r\nimport { hasSlot } from '../../utils/helper';\r\nimport { uniqueId } from 'lodash-es';\r\n\r\n@Component({\r\n  tag: 'go-accordion-item',\r\n  styleUrl: 'go-accordion-item.scss',\r\n  shadow: false,\r\n})\r\nexport class GoAccordionItem {\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Heading text.\r\n   * This can be overwritten by `heading` slot\r\n   */\r\n  @Prop() heading?: string = null;\r\n\r\n  /**\r\n   * The HTML tag to be applied to the heading text.\r\n   * This can be overwritten by `heading` slot\r\n   */\r\n  @Prop() headingTag?: string = 'h3';\r\n\r\n  /**\r\n   * If expanded height should be automatically calculated. If true, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height\r\n   */\r\n  @Prop() autoHeight?: boolean = true;\r\n\r\n  /**\r\n   * If the accordion item should be opened by default\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) active?: boolean = false;\r\n\r\n  @State() hasHeadingSlot: boolean = true;\r\n  @State() hasArrowSlot: boolean = true;\r\n\r\n  panelId: string;\r\n  headerId: string;\r\n  panelEl: HTMLElement;\r\n  animationHeightInterval: number; // number of px per frame of animation change.\r\n\r\n  parentGroup: HTMLGoAccordionElement;\r\n\r\n  /**\r\n   * Emitted when accordion item has opened\r\n   */\r\n  @Event() opened: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when accordion item started opening\r\n   */\r\n  @Event() opening: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when accordion item has closed\r\n   */\r\n  @Event() closed: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when accordion item started closing\r\n   */\r\n  @Event() closing: EventEmitter;\r\n\r\n  componentWillLoad() {\r\n    this.hasHeadingSlot = hasSlot(this.el, 'heading');\r\n    this.hasArrowSlot = hasSlot(this.el, 'arrow');\r\n    this.panelId = uniqueId('go-accordion-item-panel-');\r\n    this.headerId = uniqueId('go-accordion-item-header-');\r\n    this.parentGroup = this.el.closest('go-accordion') as HTMLGoAccordionElement;\r\n  }\r\n  componentDidLoad() {\r\n    if (this.autoHeight) {\r\n      this.panelEl.style.setProperty('--body-max-height', this.panelEl.scrollHeight + 2 + 'px');\r\n    }\r\n    this.onTransitionEnd();\r\n    this.panelEl.addEventListener('transitionstart', () => {\r\n      this.onTransitionStart();\r\n    });\r\n    this.panelEl.addEventListener('transitionend', () => {\r\n      this.onTransitionEnd();\r\n    });\r\n  }\r\n\r\n  handleNavigation(key) {\r\n    if (key === 'ArrowDown') {\r\n      if (this.el.nextElementSibling) {\r\n        (this.el.nextElementSibling as HTMLGoAccordionItemElement).focusOnControl();\r\n      }\r\n    }\r\n    if (key === 'ArrowUp') {\r\n      if (this.el.previousElementSibling) {\r\n        (this.el.previousElementSibling as HTMLGoAccordionItemElement).focusOnControl();\r\n      }\r\n    }\r\n    if (key === 'Home') {\r\n      (this.parentGroup.children[0] as HTMLGoAccordionItemElement).focusOnControl();\r\n    }\r\n    if (key === 'End') {\r\n      (this.parentGroup.children[this.parentGroup.children.length - 1] as HTMLGoAccordionItemElement).focusOnControl();\r\n    }\r\n  }\r\n\r\n  onTransitionEnd() {\r\n    if (this.active) {\r\n      this.panelEl.style.overflow = 'auto';\r\n      this.opened.emit();\r\n    } else {\r\n      this.panelEl.style.overflow = 'hidden';\r\n      this.panelEl.style.visibility = 'hidden';\r\n      this.closed.emit();\r\n    }\r\n  }\r\n  onTransitionStart() {\r\n    if (this.active) {\r\n      this.panelEl.style.visibility = 'visible';\r\n      this.opening.emit();\r\n    } else {\r\n      this.closing.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle open state of accordion item\r\n   */\r\n  @Method()\r\n  async toggle() {\r\n    if (this.active) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the accordion item\r\n   */\r\n  @Method()\r\n  async close() {\r\n    this.active = false;\r\n  }\r\n\r\n  /**\r\n   * Opens the accordion item.\r\n   */\r\n  @Method()\r\n  async open() {\r\n    this.active = true;\r\n  }\r\n\r\n  /**\r\n   * Focus on header control\r\n   */\r\n  @Method()\r\n  async focusOnControl() {\r\n    (this.el.querySelector('.heading-control') as HTMLElement).focus();\r\n  }\r\n\r\n  render() {\r\n    const { active, autoHeight, headingTag: HeadingTag, panelId, headerId } = this;\r\n    return (\r\n      <Host class={{ active, autoHeight }}>\r\n        <HeadingTag class=\"heading\">\r\n          <button\r\n            id={headerId}\r\n            class=\"heading-control\"\r\n            role=\"button\"\r\n            onClick={() => this.toggle()}\r\n            onKeyDown={(e) => this.handleNavigation(e.key)}\r\n            aria-expanded={active ? 'true' : 'false'}\r\n            aria-controls={panelId}>\r\n            {this.hasHeadingSlot ? <slot name=\"heading\"></slot> : this.heading}\r\n            <span class=\"arrow\">\r\n              {this.hasArrowSlot ? (\r\n                <slot name=\"arrow\"></slot>\r\n              ) : (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-width=\"2\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  aria-hidden=\"true\"\r\n                  focusable=\"false\">\r\n                  <path d=\"m6 9 6 6 6-6\" />\r\n                </svg>\r\n              )}\r\n            </span>\r\n          </button>\r\n        </HeadingTag>\r\n        <div class=\"panel-wrapper\" role=\"region\" id={panelId} aria-labelledby={headerId} ref={(el) => (this.panelEl = el as HTMLElement)}>\r\n          <div class=\"panel\">\r\n            <slot></slot>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}