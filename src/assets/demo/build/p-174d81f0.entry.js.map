{"version":3,"names":["GoInput","this","prefixer","hasNamedSlot","controlId","uniqueId","componentWillLoad","attrs","inheritNonFieldAttrs","loadFieldSlots","el","render","value","fieldProps","loadFieldProps","h","Object","assign","fieldSlotNames","map","slotName","slot","name","class","ref","controlEl","id","onInput","e","target"],"sources":["src/components/form/go-input/go-input.tsx"],"sourcesContent":["import { Component, h, Element, Prop, State } from '@stencil/core';\r\nimport { InputProps } from '../../../interfaces';\r\nimport { uniqueId } from 'lodash-es';\r\nimport { loadFieldProps, fieldSlotNames, inheritNonFieldAttrs, loadFieldSlots } from '../../../utils';\r\n@Component({\r\n  tag: 'go-input',\r\n  shadow: false,\r\n})\r\nexport class GoInput implements InputProps {\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * DOM id for label\r\n   */\r\n  @Prop() labelId?: string;\r\n\r\n  /**\r\n   * DOM id for prefix\r\n   */\r\n  @Prop() prefixId?: string;\r\n\r\n  /**\r\n   * DOM id for suffix\r\n   */\r\n  @Prop() suffixId?: string;\r\n  /**\r\n   * DOM id for hint message\r\n   */\r\n  @Prop() hintId?: string;\r\n\r\n  /**\r\n   * DOM id for error\r\n   */\r\n  @Prop() errorId?: string;\r\n\r\n  /**\r\n   * Name of the input field\r\n   */\r\n  @Prop() name: string;\r\n\r\n  /**\r\n   * Label of the input field\r\n   */\r\n  @Prop() label: string;\r\n\r\n  /**\r\n   * If the input is disabled\r\n   */\r\n  @Prop() disabled?: boolean;\r\n  /**\r\n   * Hint message for the input\r\n   */\r\n  @Prop() hint?: string;\r\n  /**\r\n   * Error state of input, text provided will be shown as error message\r\n   */\r\n  @Prop() error?: boolean | string;\r\n  /**\r\n   * If this input is read-only\r\n   */\r\n  @Prop() readonly?: boolean;\r\n\r\n  /**\r\n   * Value of the input field\r\n   */\r\n  @Prop({ mutable: true }) value?: string;\r\n\r\n  /**\r\n   * keep track of non-field attrs\r\n   */\r\n  @State() attrs: any;\r\n\r\n  prefixer = 'go-input-';\r\n  hasNamedSlot: { [key: string]: boolean } = {};\r\n  controlId = uniqueId(this.prefixer);\r\n  controlEl: HTMLElement;\r\n  componentWillLoad() {\r\n    this.attrs = inheritNonFieldAttrs(this);\r\n    this.hasNamedSlot = loadFieldSlots(this.el);\r\n  }\r\n\r\n  render() {\r\n    const { controlId, value, attrs } = this;\r\n    const fieldProps = loadFieldProps(this);\r\n    return (\r\n      <go-field {...fieldProps}>\r\n        {fieldSlotNames.map((slotName) => {\r\n          if (this.hasNamedSlot[slotName]) {\r\n            return (\r\n              <template slot={slotName}>\r\n                <slot name={slotName}></slot>\r\n              </template>\r\n            );\r\n          }\r\n        })}\r\n        <input\r\n          {...fieldProps}\r\n          {...attrs}\r\n          class=\"control\"\r\n          ref={(el) => (this.controlEl = el)}\r\n          id={controlId}\r\n          value={value}\r\n          onInput={(e) => (this.value = (e.target as HTMLInputElement).value)}\r\n        />\r\n      </go-field>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"6NAQaA,EAAO,M,yBAgElBC,KAAAC,SAAW,YACXD,KAAAE,aAA2C,GAC3CF,KAAAG,UAAYC,EAASJ,KAAKC,U,gSAE1B,iBAAAI,GACEL,KAAKM,MAAQC,EAAqBP,MAClCA,KAAKE,aAAeM,EAAeR,KAAKS,G,CAG1C,MAAAC,GACE,MAAMP,UAAEA,EAASQ,MAAEA,EAAKL,MAAEA,GAAUN,KACpC,MAAMY,EAAaC,EAAeb,MAClC,OACEc,EAAA,WAAAC,OAAAC,OAAA,GAAcJ,GACXK,EAAeC,KAAKC,IACnB,GAAInB,KAAKE,aAAaiB,GAAW,CAC/B,OACEL,EAAA,YAAUM,KAAMD,GACdL,EAAA,QAAMO,KAAMF,I,KAKpBL,EAAA,QAAAC,OAAAC,OAAA,GACMJ,EACAN,EAAK,CACTgB,MAAM,UACNC,IAAMd,GAAQT,KAAKwB,UAAYf,EAC/BgB,GAAItB,EACJQ,MAAOA,EACPe,QAAUC,GAAO3B,KAAKW,MAASgB,EAAEC,OAA4BjB,S"}