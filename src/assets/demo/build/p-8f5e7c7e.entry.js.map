{"version":3,"names":["goTextareaCss","GoTextarea","this","hasNamedSlot","prefixer","controlId","uniqueId","componentWillLoad","attrs","inheritNonFieldAttrs","loadFieldSlots","el","updateControlHeight","autoGrow","controlEl","style","height","scrollHeight","render","value","id","fieldProps","loadFieldProps","h","Object","assign","fieldSlotNames","map","slotName","slot","name","ref","class","rows","onInput","e","target","maxlength","_a","length","role","Number"],"sources":["src/components/form/go-textarea/go-textarea.scss?tag=go-textarea","src/components/form/go-textarea/go-textarea.tsx"],"sourcesContent":["@import '../../../global/scss/form/variables';\r\n@import '../../../global/scss/form/mixins';\r\ngo-textarea {\r\n  display: block;\r\n\r\n  textarea {\r\n    overflow: auto;\r\n    resize: vertical;\r\n    &:disabled,\r\n    &:read-only {\r\n      resize: none;\r\n    }\r\n  }\r\n  .textarea-count {\r\n    @include hint;\r\n    margin-top: var(--input-gap-inner);\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n","import { Component, h, Element, Prop, Watch, State } from '@stencil/core';\r\nimport { TextareaProps } from '../../../interfaces';\r\nimport { uniqueId } from 'lodash-es';\r\nimport { fieldSlotNames, inheritNonFieldAttrs, loadFieldProps, loadFieldSlots } from '../../../utils';\r\n@Component({\r\n  tag: 'go-textarea',\r\n  styleUrl: 'go-textarea.scss',\r\n  shadow: false,\r\n})\r\nexport class GoTextarea implements TextareaProps {\r\n  @Element() el: HTMLElement;\r\n  /**\r\n   * DOM id for label\r\n   */\r\n  @Prop() labelId?: string;\r\n\r\n  /**\r\n   * DOM id for prefix\r\n   */\r\n  @Prop() prefixId?: string;\r\n\r\n  /**\r\n   * DOM id for suffix\r\n   */\r\n  @Prop() suffixId?: string;\r\n  /**\r\n   * DOM id for hint message\r\n   */\r\n  @Prop() hintId?: string;\r\n\r\n  /**\r\n   * DOM id for error\r\n   */\r\n  @Prop() errorId?: string;\r\n\r\n  /**\r\n   * Name of the input field\r\n   */\r\n  @Prop() name: string;\r\n\r\n  /**\r\n   * Label of the input field\r\n   */\r\n  @Prop() label: string;\r\n\r\n  /**\r\n   * If the input is disabled\r\n   */\r\n  @Prop() disabled?: boolean;\r\n  /**\r\n   * Hint message for the input\r\n   */\r\n  @Prop() hint?: string;\r\n  /**\r\n   * Error state of input, text provided will be shown as error message\r\n   */\r\n  @Prop() error?: boolean | string;\r\n  /**\r\n   * If this input is read-only\r\n   */\r\n  @Prop() readonly?: boolean;\r\n\r\n  /**\r\n   * Value of the input field\r\n   */\r\n  @Prop({ mutable: true }) value?: string;\r\n\r\n  /**\r\n   * If set, grow textarea based on its content\r\n   */\r\n  @Prop() autoGrow?: boolean = false;\r\n\r\n  hasNamedSlot: { [key: string]: boolean } = {};\r\n  prefixer = 'go-textarea-';\r\n  controlId = uniqueId(this.prefixer);\r\n  controlEl: HTMLTextAreaElement;\r\n  /**\r\n   * keep track of non-field attrs\r\n   */\r\n  @State() attrs: any;\r\n\r\n  componentWillLoad() {\r\n    this.attrs = inheritNonFieldAttrs(this, ['auto-grow']);\r\n    this.hasNamedSlot = loadFieldSlots(this.el);\r\n  }\r\n\r\n  @Watch('value')\r\n  updateControlHeight() {\r\n    if (this.autoGrow && this.controlEl) {\r\n      this.controlEl.style.height = 'auto';\r\n      this.controlEl.style.height = this.controlEl.scrollHeight + 'px';\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { value, controlId: id, attrs } = this;\r\n    const fieldProps = loadFieldProps(this);\r\n    return (\r\n      <go-field {...fieldProps}>\r\n        {fieldSlotNames.map((slotName) => {\r\n          if (this.hasNamedSlot[slotName]) {\r\n            return (\r\n              <template slot={slotName}>\r\n                <slot name={slotName}></slot>\r\n              </template>\r\n            );\r\n          }\r\n        })}\r\n\r\n        <textarea\r\n          {...fieldProps}\r\n          {...attrs}\r\n          ref={(el) => (this.controlEl = el)}\r\n          id={id}\r\n          class=\"control\"\r\n          rows={5}\r\n          onInput={(e) => (this.value = (e.target as HTMLTextAreaElement).value)}>\r\n          {value}\r\n        </textarea>\r\n        {attrs.maxlength && attrs.maxlength > 0 ? (\r\n          <span class=\"textarea-count\">\r\n            {value?.length ?? 0}/{attrs.maxlength}\r\n            <span class=\"visually-hidden\" aria-live=\"assertive\" role=\"alert\">\r\n              {value?.length === Number(attrs.maxlength)\r\n                ? `Limit reached, you can only enter ${attrs.maxlength} characters in this field.`\r\n                : ''}\r\n            </span>\r\n          </span>\r\n        ) : null}\r\n      </go-field>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"uNAAA,MAAMA,EAAgB,6lD,MCSTC,EAAU,M,yBA+DrBC,KAAAC,aAA2C,GAC3CD,KAAAE,SAAW,eACXF,KAAAG,UAAYC,EAASJ,KAAKE,U,yRAJG,M,qBAW7B,iBAAAG,GACEL,KAAKM,MAAQC,EAAqBP,KAAM,CAAC,cACzCA,KAAKC,aAAeO,EAAeR,KAAKS,G,CAI1C,mBAAAC,GACE,GAAIV,KAAKW,UAAYX,KAAKY,UAAW,CACnCZ,KAAKY,UAAUC,MAAMC,OAAS,OAC9Bd,KAAKY,UAAUC,MAAMC,OAASd,KAAKY,UAAUG,aAAe,I,EAIhE,MAAAC,G,MACE,MAAMC,MAAEA,EAAOd,UAAWe,EAAEZ,MAAEA,GAAUN,KACxC,MAAMmB,EAAaC,EAAepB,MAClC,OACEqB,EAAA,WAAAC,OAAAC,OAAA,GAAcJ,GACXK,EAAeC,KAAKC,IACnB,GAAI1B,KAAKC,aAAayB,GAAW,CAC/B,OACEL,EAAA,YAAUM,KAAMD,GACdL,EAAA,QAAMO,KAAMF,I,KAMpBL,EAAA,WAAAC,OAAAC,OAAA,GACMJ,EACAb,EAAK,CACTuB,IAAMpB,GAAQT,KAAKY,UAAYH,EAC/BS,GAAIA,EACJY,MAAM,UACNC,KAAM,EACNC,QAAUC,GAAOjC,KAAKiB,MAASgB,EAAEC,OAA+BjB,QAC/DA,GAEFX,EAAM6B,WAAa7B,EAAM6B,UAAY,EACpCd,EAAA,QAAMS,MAAM,mBACTM,EAAAnB,IAAK,MAALA,SAAK,SAALA,EAAOoB,UAAM,MAAAD,SAAA,EAAAA,EAAI,EAAC,IAAG9B,EAAM6B,UAC5Bd,EAAA,QAAMS,MAAM,kBAAiB,YAAW,YAAYQ,KAAK,UACtDrB,IAAK,MAALA,SAAK,SAALA,EAAOoB,UAAWE,OAAOjC,EAAM6B,WAC5B,qCAAqC7B,EAAM6B,sCAC3C,KAGN,K"}