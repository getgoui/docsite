{"version":3,"names":["goSkipLinkCss","GoSkipLink","this","hasTabIndex","componentWillLoad","targetEl","document","querySelector","target","warning","hasAttribute","id","setTabIndex","uniqueId","href","setAttribute","render","h","Host","class"],"sources":["src/components/go-skip-link/go-skip-link.scss?tag=go-skip-link","src/components/go-skip-link/go-skip-link.tsx"],"sourcesContent":["go-skip-link {\r\n  /**\r\n    @prop --skip-link-padding:\r\n      Padding to apply to the skip link focusable area\r\n      - default: 1rem 2rem\r\n  */\r\n  --skip-link-padding: 1rem 2rem;\r\n\r\n  /**\r\n    @prop --skip-link-bg-color:\r\n      Background color for the skip link focusable area\r\n      - default: var(--go-color-secondary-700)\r\n  */\r\n  --skip-link-bg-color: var(--go-color-secondary-700);\r\n\r\n  /**\r\n    @prop --skip-link-text-color:\r\n      Text color for the skip link focusable area\r\n      - default: var(--go-color-lightest)\r\n  */\r\n  --skip-link-text-color: var(--go-color-lightest);\r\n\r\n  position: fixed;\r\n  top: 1rem;\r\n  left: 1rem;\r\n\r\n  a,\r\n  a:focus-visible {\r\n    display: block;\r\n    padding: var(--skip-link-padding);\r\n    background: var(--skip-link-bg-color);\r\n    color: var(--skip-link-text-color);\r\n    box-shadow: var(--shadow-2);\r\n  }\r\n}\r\n","import { Component, Host, h, Element, Prop, State } from '@stencil/core';\r\nimport { uniqueId } from 'lodash-es';\r\nimport { warning } from '../../utils/helper';\r\n\r\n@Component({\r\n  tag: 'go-skip-link',\r\n  styleUrl: 'go-skip-link.scss',\r\n  shadow: false,\r\n})\r\nexport class GoSkipLink {\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Tell skip link which element to focus (supports any query selector)\r\n   */\r\n  @Prop() target?: string = 'main';\r\n\r\n  @State() href: string;\r\n\r\n  /**\r\n   * records if original target element has tabindex attribute set, if so, do not touch it\r\n   */\r\n  hasTabIndex: boolean = false;\r\n\r\n  componentWillLoad() {\r\n    // get target element\r\n    // check if id exists\r\n    // if not, generate random id and set it in the link href\r\n\r\n    const targetEl = document.querySelector(this.target) as HTMLElement;\r\n\r\n    if (!targetEl) {\r\n      warning(`[go-skip-link] target ${this.target} not found.`);\r\n      return;\r\n    }\r\n\r\n    if (targetEl.hasAttribute('tabindex')) {\r\n      this.hasTabIndex = true;\r\n    }\r\n\r\n    if (targetEl.id) {\r\n      this.setTabIndex(targetEl, targetEl.id);\r\n      return;\r\n    }\r\n    // generate a random id then set href\r\n    const id = uniqueId('skip-link-target-');\r\n    targetEl.id = id;\r\n    this.setTabIndex(targetEl, id);\r\n  }\r\n\r\n  setTabIndex(targetEl: HTMLElement, id: string): void {\r\n    this.href = `#${id}`;\r\n    if (!this.hasTabIndex) {\r\n      targetEl.setAttribute('tabindex', '-1');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { href } = this;\r\n    return (\r\n      <Host>\r\n        <a href={href} class=\"visually-hidden-focusable\">\r\n          <slot></slot>\r\n        </a>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"yJAAA,MAAMA,EAAgB,gX,MCSTC,EAAU,M,yBAarBC,KAAAC,YAAuB,M,YAPG,O,oBAS1B,iBAAAC,GAKE,MAAMC,EAAWC,SAASC,cAAcL,KAAKM,QAE7C,IAAKH,EAAU,CACbI,EAAQ,yBAAyBP,KAAKM,qBACtC,M,CAGF,GAAIH,EAASK,aAAa,YAAa,CACrCR,KAAKC,YAAc,I,CAGrB,GAAIE,EAASM,GAAI,CACfT,KAAKU,YAAYP,EAAUA,EAASM,IACpC,M,CAGF,MAAMA,EAAKE,EAAS,qBACpBR,EAASM,GAAKA,EACdT,KAAKU,YAAYP,EAAUM,E,CAG7B,WAAAC,CAAYP,EAAuBM,GACjCT,KAAKY,KAAO,IAAIH,IAChB,IAAKT,KAAKC,YAAa,CACrBE,EAASU,aAAa,WAAY,K,EAItC,MAAAC,GACE,MAAMF,KAAEA,GAASZ,KACjB,OACEe,EAACC,EAAI,KACHD,EAAA,KAAGH,KAAMA,EAAMK,MAAM,6BACnBF,EAAA,c"}