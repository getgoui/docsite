{"version":3,"names":["goDarkModeCss","GoDarkMode","componentWillLoad","theme","this","getUserPreference","setTheme","window","matchMedia","addEventListener","async","e","matches","userTheme","localStorage","getItem","setItem","changeEvent","emit","document","documentElement","setAttribute","attribute"],"sources":["src/components/go-dark-mode/go-dark-mode.scss?tag=go-dark-mode","src/components/go-dark-mode/go-dark-mode.tsx"],"sourcesContent":["go-dark-mode {\r\n display: block;\r\n}\r\n","import { Component, Prop, Build, EventEmitter, Event, Method } from '@stencil/core';\r\n\r\nexport type Theme = 'light' | 'dark';\r\n@Component({\r\n  tag: 'go-dark-mode',\r\n  styleUrl: 'go-dark-mode.scss',\r\n  shadow: false,\r\n})\r\nexport class GoDarkMode {\r\n  /**\r\n   * Attribute name on html element that will be used to store theme\r\n   */\r\n  @Prop() attribute: string = 'data-theme';\r\n\r\n  async componentWillLoad() {\r\n    // get user preference\r\n    const theme = await this.getUserPreference();\r\n\r\n    this.setTheme(theme);\r\n\r\n    // add event listener\r\n    if (Build.isBrowser) {\r\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', async (e) => {\r\n        await this.setTheme(e.matches ? 'dark' : 'light');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get preferred theme,\r\n   * 1. Check user settings:\r\n   *    - check if localstorage has user-theme key\r\n   *    - if so, check if value is either light or dark,\r\n   *    - if so, return value\r\n   *    - if value is neither light or dark, continue to next step\r\n   * 2. Check system preference:\r\n   *    - check if prefers-color-scheme is dark, if so, return dark\r\n   * 3. default to light\r\n   */\r\n  @Method()\r\n  async getUserPreference(): Promise<Theme> {\r\n    const userTheme = localStorage.getItem('user-theme');\r\n    if (userTheme === 'light' || userTheme === 'dark') {\r\n      return userTheme;\r\n    }\r\n\r\n    // Check system preference\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n\r\n    // Default to light\r\n    return 'light';\r\n  }\r\n\r\n  @Event({\r\n    eventName: 'themechange',\r\n  })\r\n  changeEvent: EventEmitter<{ theme: Theme }>;\r\n\r\n  /**\r\n   * set the current theme and change the html attribute\r\n   * @param theme theme to set\r\n   */\r\n  @Method()\r\n  async setTheme(theme: Theme): Promise<void> {\r\n    localStorage.setItem('user-theme', theme);\r\n    this.changeEvent.emit({ theme });\r\n    document.documentElement.setAttribute(this.attribute, theme);\r\n  }\r\n}\r\n"],"mappings":"2CAAA,MAAMA,EAAgB,8B,MCQTC,EAAU,M,iFAIO,Y,CAE5B,uBAAMC,GAEJ,MAAMC,QAAcC,KAAKC,oBAEzBD,KAAKE,SAASH,GAGO,CACnBI,OAAOC,WAAW,gCAAgCC,iBAAiB,UAAUC,MAAOC,UAC5EP,KAAKE,SAASK,EAAEC,QAAU,OAAS,QAAQ,G,EAiBvD,uBAAMP,GACJ,MAAMQ,EAAYC,aAAaC,QAAQ,cACvC,GAAIF,IAAc,SAAWA,IAAc,OAAQ,CACjD,OAAOA,C,CAIT,GAAIN,OAAOC,YAAcD,OAAOC,WAAW,gCAAgCI,QAAS,CAClF,MAAO,M,CAIT,MAAO,O,CAaT,cAAMN,CAASH,GACbW,aAAaE,QAAQ,aAAcb,GACnCC,KAAKa,YAAYC,KAAK,CAAEf,UACxBgB,SAASC,gBAAgBC,aAAajB,KAAKkB,UAAWnB,E"}